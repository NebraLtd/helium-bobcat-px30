name: Build and Preload OpenFleet

on:
  repository_dispatch:
    types: [build-open-fleet]
  workflow_dispatch:

env:
  balena-cli: v15.1.1
  balena-bobcat-image: 2023.06.09

jobs:
  build-open-fleet:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
      - name: Install latest balena-cli
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip zip
          cd /opt/
          echo "Uses Balena CLI version: ${{ env.balena-cli }}"
          curl -O -sSL "https://github.com/balena-io/balena-cli/releases/download/${{ env.balena-cli }}/balena-cli-${{ env.balena-cli }}-linux-x64-standalone.zip"
          unzip balena-cli-*-linux-x64-standalone.zip
          sudo ln -s /opt/balena-cli/balena /usr/bin/
          cd ~

      - name: Download base Balena OS image
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'NebraLtd/balena-bobcat-px30'
          version: 'tags/${{ env.balena-bobcat-image }}'
          file: 'balena-image-bobcat-px30-${{ env.balena-bobcat-image }}.img.zip'
          target: 'images/balena-base-${{ github.event.repository.name }}.img.zip'
          token: ${{ secrets.MR_BUMP }}

      - name: Generate a Balena OS image for the given board, variant, frequency
        run: |
          LATEST_GA=${{ github.event.client_payload.tag }}
          if [ "${LATEST_GA}" != "" ] ; then
            echo "New release pushed to main repo: $LATEST_GA"
            echo "LATEST_GA=$LATEST_GA" >> $GITHUB_ENV
          else
            echo "No release version provided! Applying tag TEST"
            echo "LATEST_GA=TEST" >> $GITHUB_ENV
          fi

          IMAGE_BASE_PATH="$(pwd)/images"
          DATE=$(date +%F)
          USER=""
          NODRYRUN=true
          VERBOSE=true

          if [[ $USER != "" ]]; then
            echo " - user: ${USER}"
          fi

          if [[ $NODRYRUN == false ]]; then
            echo "(Dryrun mode enabled)"
          fi

          if $VERBOSE ; then
            echo "(Verbose mode enabled)"
          fi
          
          unzip $IMAGE_BASE_PATH/*.zip -d $IMAGE_BASE_PATH/
          base_image_path="$IMAGE_BASE_PATH/balena-base-${{ github.event.repository.name }}.img"
          mv ${IMAGE_BASE_PATH}/*.img ${base_image_path}

          echo "IMAGE_BASE_PATH=$IMAGE_BASE_PATH" >> $GITHUB_ENV
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "base_image_path=$base_image_path" >> $GITHUB_ENV
    
      - name: Balena login
        run: |
          echo "balenaUrl: cloud.nebra.com" > ~/.balenarc.yml
          balena login --token ${{ secrets.NEBRAOS_CLOUD_TOKEN }} > /dev/null

      - name: Configure Balena OS image for the given board, variant, frequency
        run: |
          # Generate image path for the given board, variant, frequency and user

          fleet_name="${{ github.event.repository.name }}"
          image_name="${fleet_name}-${{ env.DATE }}"
          image_path="${{ env.IMAGE_BASE_PATH }}/${image_name}.img"

          # Minimum output
          echo "Generating image for ${fleet_name} fleet"

          if $VERBOSE ; then
            echo "Image path is ${image_path}"
          fi

          # Configure balena OS image

          if $VERBOSE ; then
            echo "Configuring image"
          fi

          # Copy base balena image to target image
          if $NODRYRUN ; then
            cp "${{ env.base_image_path }}" "$image_path"
          fi
          
          if $NODRYRUN ; then
            sudo balena config inject ${GITHUB_WORKSPACE}/config.json --drive "${image_path}"
          fi

          if $VERBOSE ; then
            echo "Pre-loading apps"
          fi

          # Preload balena OS image

          if $NODRYRUN ; then
            balena preload "$image_path" \
              --fleet "nebraltd/$fleet_name" \
              -c "current"
          fi

          if $VERBOSE ; then
            echo "Adding ssh keys to the image"
          fi

          if $NODRYRUN ; then
            final_json_filename=/tmp/final.json
            ssh_public_keys=$(cat ssh_public_keys.json)
            sudo balena config read --drive "$image_path" -j \
                | jq ". += $ssh_public_keys" > $final_json_filename
            sudo balena config inject $final_json_filename --drive "$image_path"
          fi

          # Copy configuration files into boot and root partition of the balena image

          if $VERBOSE ; then
            echo "Copying configuration files..."
          fi

          # Compress Balena image file and generate SHA512 checksum file
          # Make the compressed file name from the image file name

          compressed_image_path=${image_path/img/zip}

          if $VERBOSE ; then
            echo "Compressing image"
          fi

          if $NODRYRUN ; then
            zip -9 -j "$compressed_image_path" "$image_path"
          fi

          if $VERBOSE ; then
            echo "Generating checkum"
          fi

          if $NODRYRUN ; then
            sha512sum "$compressed_image_path" > "$compressed_image_path.sha512"
          fi

          # Export image name and compressed image path to the environment
          export IMAGE_NAME="$image_name"
          export COMPRESSED_IMAGE_PATH="$compressed_image_path"

          echo "Image Name: ${IMAGE_NAME}"
          echo "Compressed Image Path: ${COMPRESSED_IMAGE_PATH}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "COMPRESSED_IMAGE_PATH=${COMPRESSED_IMAGE_PATH}" >> $GITHUB_ENV

      - name: Set date
        run: |
          echo "timestamp=$(date +'%s')" >> $GITHUB_ENV
          echo "day=$(date +'%F')" >> $GITHUB_ENV

      - name: Copy OS image file and checksum to final location
        run: |
          cp "${{ env.COMPRESSED_IMAGE_PATH }}" "${{ env.IMAGE_NAME }}.zip"
          cp "${{ env.COMPRESSED_IMAGE_PATH }}.sha512" "${{ env.IMAGE_NAME }}.zip.sha512"          

      - name: Upload image file and checksum to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.IMAGE_NAME }}.*
          tag: ${{ env.LATEST_GA }}-${{ env.IMAGE_NAME }}-OpenFleet
          overwrite: true
          file_glob: true
